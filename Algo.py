import streamlit as st
import pandas as pd
import Gfile as gf

def initial_info():
    TimeF=st.text_input("üî¢ Th·ªùi gian s·ª± c·ªë",placeholder="00:00:00 ng√†y 01/01/2025")
    F79 = st.radio(
    "### **T√¨nh tr·∫°ng ƒë√≥ng l·∫∑p l·∫°i:**",[":green[Th√†nh c√¥ng] :white_check_mark:", ":red[Kh√¥ng th√†nh c√¥ng] :x:"],index=None, horizontal=True)
    return F79



def find_positions(value, data,role_name,subs_no):
    lower=0     #Khoi tao lower bang 0
    result=None #Khoi tao result bang None nham tranh gop loi

    if 'Chi·ªÅu d√†i' not in data.columns or data.empty:
        st.error(f"‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu c·ªôt 'Chi·ªÅu d√†i'")
        return None
    if subs_no=="subs_0":
        for i in range(len(data)-1):
            lower=data['Chi·ªÅu d√†i'].iloc[i]+lower
            upper=lower+data['Chi·ªÅu d√†i'].iloc[i+1]
            if value==lower:        #Neu value bang lower
                result = data['V·ªã tr√≠'].iloc[i-1],data['V·ªã tr√≠'].iloc[i], data['V·ªã tr√≠'].iloc[i + 1]  
            elif min(lower, upper) < value <= max(lower, upper):
                result = data['V·ªã tr√≠'].iloc[i], data['V·ªã tr√≠'].iloc[i + 1]

    if subs_no=="subs_1":           #TBA so 1
        for i in range(len(data)-1,-1,-1):
            lower=data['Chi·ªÅu d√†i'].iloc[i]+lower
            upper=lower+data['Chi·ªÅu d√†i'].iloc[i-1]
            if value==lower and i!=len(data)-1:
                result = data['V·ªã tr√≠'].iloc[i-1],data['V·ªã tr√≠'].iloc[i], data['V·ªã tr√≠'].iloc[i + 1]   
            elif min(lower, upper) < value <= max(lower, upper):
                result = data['V·ªã tr√≠'].iloc[i - 1],data['V·ªã tr√≠'].iloc[i]
        
                
    if value:
        if not result:
            st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kho·∫£ng ph√π h·ª£p v·ªõi gi√° tr·ªã ƒë√£ nh·∫≠p, h√£y ƒë·∫£m b·∫£o r·∫±ng gi√° tr·ªã n·∫±m trong ph·∫°m vi chi·ªÅu d√†i c·ªßa ƒë∆∞·ªùng d√¢y! ")
        elif len(result)==2:
            st.info(f"üîç Kho·∫£ng c√°ch r∆° le {role_name} t∆∞∆°ng ƒë∆∞∆°ng kho·∫£ng c·ªôt {result[0]} - {result[1]}.")
        elif len(result)==3:
            st.info(f"üîç Kho·∫£ng c√°ch r∆° le {role_name} t∆∞∆°ng ƒë∆∞∆°ng kho·∫£ng c·ªôt {result[0]} - {result[1]} - {result[2]}.")          
        return result
    return None


def info(df, result, role_name):
    if not result:
        st.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã cho {role_name}.")
        return
    if 'V·ªã tr√≠' not in df.columns:
        st.error("‚ùå File th√¥ng tin c·ªôt thi·∫øu c·ªôt 'V·ªã tr√≠'.")
        return
    get_col=df.query("`V·ªã tr√≠` in @result")[['V·ªã tr√≠','Kho·∫£ng c·ªôt', 'C√¥ng d·ª•ng c·ªôt','Th·ª© t·ª± pha','Chi·ªÅu d√†i']]
    st.write(get_col.T)

def process(subs, df, subs_no):
    st.header(f"üìã{subs}")
    st.write(f" üîç***T·ªïng chi·ªÅu d√†i ƒë∆∞·ªùng d√¢y: {df['Chi·ªÅu d√†i'].sum()} m***")
    st.markdown("---")
    dis87_2 = st.number_input(f"üî¢ Nh·∫≠p kho·∫£ng c√°ch s·ª± c·ªë F87/{subs}:", min_value=0,step=500)
    dis21_2 = st.number_input(f"üî¢ Nh·∫≠p kho·∫£ng c√°ch s·ª± c·ªë F21/{subs}:", min_value=0,step=500)
    result_87 = find_positions(dis87_2, df, "F87", subs_no)
    if result_87:
        info(df, result_87, "F87")
        directions (df, result_87)
    result_21 = find_positions(dis21_2, df, "F21", subs_no)
    if result_21:
        info(df, result_21, "F21")
        directions (df, result_21)
    return


 
def directions (df, result):
    if result:
        lat=df.query("`V·ªã tr√≠` in @result")['Latitude']
        lon=df.query("`V·ªã tr√≠` in @result")['Longtitude']
        maps_url_0 = f"https://www.google.com/maps?q={lat.iloc[0]},{lon.iloc[0]}"
        st.markdown(f"[üó∫Ô∏è Xem tr√™n b·∫£n ƒë·ªì: VT {result[0]}]({maps_url_0})", unsafe_allow_html=True)
        maps_url_1 = f"https://www.google.com/maps?q={lat.iloc[1]},{lon.iloc[1]}"
        st.markdown(f"[üó∫Ô∏è Xem tr√™n b·∫£n ƒë·ªì: VT {result[1]}]({maps_url_1})", unsafe_allow_html=True)
    return None
    

    # row_index = df[df['V·ªã tr√≠']==v1].index[0]





     
 # def findx(dis, dataframe, role_name, col_name):
#     if dis:
#         result = find_positions(dis, dataframe, col_name)
#         if result:
#             st.info(f"üîç Kho·∫£ng c√°ch r∆° le {role_name} t∆∞∆°ng ƒë∆∞∆°ng kho·∫£ng c·ªôt {result[0]} - {result[1]}.")
#         else:
#             st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kho·∫£ng ph√π h·ª£p v·ªõi gi√° tr·ªã ƒë√£ nh·∫≠p.")
#         return result
#     return None

# def findx(dis, dataframe, role_name):
#     if dis:
#         result = find_positions(dis, dataframe)
#         if result:
#             st.info(f"üîç Kho·∫£ng c√°ch r∆° le {role_name} t∆∞∆°ng ƒë∆∞∆°ng kho·∫£ng c·ªôt {result[0]} - {result[1]}.")
#         else:
#             st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kho·∫£ng ph√π h·ª£p v·ªõi gi√° tr·ªã ƒë√£ nh·∫≠p.")
#         return result
#     return None    
     
# def process(subs, df):
#     col_name=gf.ass_col_name(subs)
#     st.header(f"üìã{subs}")
#     st.markdown("---")
#     dis87_2 = st.number_input(f"üî¢ Nh·∫≠p kho·∫£ng c√°ch s·ª± c·ªë F87/{subs}:", min_value=0)
#     dis21_2 = st.number_input(f"üî¢ Nh·∫≠p kho·∫£ng c√°ch s·ª± c·ªë F21/{subs}:", min_value=0)
#     result_87 = findx(dis87_2, df, "F87", col_name)
#     if result_87:
#         info(df, result_87, "F87")
#     result_21 = findx(dis21_2, df, "F21", col_name)
#     if result_21:
#         info(df, result_21, "F21") 
 
# def find_positions(value, data, col_name):
#     if col_name not in data.columns or data.empty:
#         st.error(f"‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu c·ªôt '{col_name}'.")
#         return None
#     for i in range(len(data) - 1):
#         lower = data[col_name].iloc[i]
#         upper = data[col_name].iloc[i + 1]
#         if min(lower, upper) <= value <= max(lower, upper):
#             return data['V·ªã tr√≠'].iloc[i], data['V·ªã tr√≠'].iloc[i + 1]
#     return None        
    # row_index = df[df['V·ªã tr√≠']==v1].index[0]
    # st.header(f"TH√îNG TIN V·ªä TR√ç {v1}")
    # cong_dung_cot=df.loc[row_index,'C√¥ng d·ª•ng c·ªôt']
    # st.write(f"C√¥ng d·ª•ng c·ªôt: {cong_dung_cot}")
    # Thu_tu_pha=df.loc[row_index,'Th·ª© t·ª± pha']
    # st.write(f"Th·ª© t·ª± pha: {Thu_tu_pha}")
    # goc_lai=df.loc[row_index,'G√≥c l√°i']
    # st.write(f"G√≥c l√°i: {goc_lai}")
    # loai_cot=df.loc[row_index,'Lo·∫°i c·ªôt']
    # st.write(f"Lo·∫°i c·ªôt: {loai_cot}")
    # chieu_cao_cot=df.loc[row_index,'Chi·ªÅu cao c·ªôt']
    # st.write(f"Chi·ªÅu cao c·ªôt: {chieu_cao_cot} m")
    # loai_tiep_dia=df.loc[row_index,'Lo·∫°i ti·∫øp ƒë·ªãa']
    # st.write(f"Lo·∫°i ti·∫øp ƒë·ªãa: {loai_tiep_dia}")
    # loai_day_dan=df.loc[row_index,'Lo·∫°i d√¢y d·∫´n']
    # st.write(f"Lo·∫°i d√¢y d·∫´n: {loai_day_dan}")
    # loai_cach_dien=df.loc[row_index,'Lo·∫°i c√°ch ƒëi·ªán']
    # st.write(f"Lo·∫°i c√°ch ƒëi·ªán: {loai_cach_dien}")
    # loai_cap_quang=df.loc[row_index,'Lo·∫°i c√°p quang']
    # st.write(f"Lo·∫°i c√°p quang: {loai_cap_quang}")
    # hanh_lang=df.loc[row_index,'H√†nh lang']
    # st.write(f"H√†nh lang: {hanh_lang}")
    
    
    
    
    # st.write(df.loc[df[df['V·ªã tr√≠']==v1].index,'TTP'])
    # st.write(df.loc[151,'TTP'])
     # st.write(f"V·ªã tr√≠ {v1}")
    # index=df[df['V·ªã tr√≠']==v1].index
    # index=df[df['V·ªã tr√≠']==v1].index
    
    
    
    # selected_rows = dataframe[dataframe['V·ªã tr√≠'].isin([v1, v2])]
    # if selected_rows.empty:
    #     st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin t∆∞∆°ng ·ª©ng trong file th√¥ng tin.")
    # else:
    #     st.subheader(f"üìã Th√¥ng tin chi ti·∫øt c√°c c·ªôt theo {role_name}:")
    #     st.table(selected_rows)
    # return v1, v2


# def info(dataframe, result, role_name):
#     if not result:
#         st.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã cho {role_name}.")
#         return
#     if 'V·ªã tr√≠' not in dataframe.columns:
#         st.error("‚ùå File th√¥ng tin c·ªôt thi·∫øu c·ªôt 'V·ªã tr√≠'.")
#         return
#     v1, v2 = result
#     selected_rows = dataframe[dataframe['V·ªã tr√≠'].isin([v1, v2])]
#     if selected_rows.empty:
#         st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin t∆∞∆°ng ·ª©ng trong file th√¥ng tin.")
#     else:
#         st.subheader(f"üìã Th√¥ng tin chi ti·∫øt c√°c c·ªôt theo {role_name}:")
#         st.table(selected_rows)

